#!/usr/bin/perl -w
# 2017-09-03  William A. Hudson

# rpix_stream -- Convert rpixel coefficient data into an data stream for
# 'simage' display.
#
# Maintenance comments:  #!!
#---------------------------------------------------------------------------

use strict;

use Getopt::Long  ();
use Pod::Usage    ( 'pod2usage' );

use FindBin qw($RealBin);

our $ToolDir;
BEGIN
{
    $ToolDir = $RealBin;
}

use lib "$ToolDir";		# Libraries from this tool installation.

our $ProgFile = $0;	# this program
our $ProgName = $0;
    $ProgName =~ s:^.*/:: ;

#---------------------------------------------------------------------------
## Main program usage
#---------------------------------------------------------------------------

# Print program usage.
#    May show configuration defaults.
# call:
#    print_usage()
# return:
#    ()  = unused
#    Does NOT exit, let main program decide that.
#
sub print_usage
{
    pod2usage( {
	-message => "Convert rpixel coefficient data into an image data stream",
	-exitval => "NOEXIT",
	-verbose => 0,
    } );

    1;
}


#---------------------------------------------------------------------------
## Main program
#---------------------------------------------------------------------------

{
    select( STDOUT );  $| = 1;	# autoflush
    select( STDERR );  $| = 1;
    # Leave STDERR selected to protect data stream.

## Option processing.

    my $op_verbose      = 0;
    my $op_debug        = 0;
    my $op_TESTOP       = 0;

    my $op_coeff        = 0;
    my $op_scale        = 1;
    my $op_offset       = 0;

    my $op_xrise        = undef;
    my $op_xfall        = undef;
    my $op_yrise        = undef;
    my $op_yfall        = undef;

    Getopt::Long::Configure(
	'posix_default',
    #	'bundling',		# enable -rN, require --word
    #	'bundling_override',	# good for -r3, clash --vx -v -x
	'no_ignore_case',
    );

    Getopt::Long::GetOptions(
	"--help"         => sub { print_usage();      exit( 0 ) },
	"--man"          => sub { do_man();           exit( 0 ) },

	"--coeff=i"      => \$op_coeff,
	"--scale=f"      => \$op_scale,
	"--offset=f"     => \$op_offset,

	"--xrise"        => \$op_xrise,
	"--xfall"        => \$op_xfall,
	"--yrise"        => \$op_yrise,
	"--yfall"        => \$op_yfall,

	"--verbose|v"    => \$op_verbose,
	"--debug"        => \$op_debug,
	"--TESTOP"       => \$op_TESTOP,

    ) || do {	# GetOptions() returns false on errors in option parsing.
	Error( "Type '$ProgName --help' for usage.\n" );
	exit( 2 );
	# Do not show usage longer than 5 lines, let user see argument error.
    };

#    print( "ProgFile= $ProgFile\n" );
#    print( "ProgName= $ProgName\n" );


    if ( @ARGV ) {
	Error( "extra arguments:  $ARGV[0]\n" );
    }

    unless ( (0 <= $op_coeff) && ($op_coeff < 15) ) {
	Error( "out of range:  --coeff=$op_coeff\n" );
    }

    if ( defined( $op_xrise ) && defined( $op_xfall ) ) {
	Error( "use one of --xrise or --xfall\n" );
    }

    if ( defined( $op_yrise ) && defined( $op_yfall ) ) {
	Error( "use one of --yrise or --yfall\n" );
    }

    # output option choice and default
    $op_xrise = ( $op_xfall ) ? 0 : 1;
    $op_yrise = ( $op_yfall ) ? 0 : 1;

    last  if ( Error() );

    if ( $op_TESTOP ) {
	print( "--coeff        = $op_coeff\n" );
	print( "--scale        = $op_scale\n" );
	print( "--offset       = $op_offset\n" );
	print( "--xrise        = $op_xrise\n" );
#	print( "--xfall        = $op_xfall\n" );
	print( "--yrise        = $op_yrise\n" );
#	print( "--yfall        = $op_yfall\n" );
	last;
    }

## Main Loop

    my $xmold = 0;
    my $ymold = 0;

    my $header = <STDIN>;
    unless ( $header =~ m/^index,Ym,Xm,/ ) {
	Error( "unexpected header line:\n",
	    "    have:  $header",
	    "    want:  index,Ym,Xm,...\n"
	);
    }

    print( STDOUT  "Ys,Xs,color\n" );	# Header

    while ( <STDIN> )
    {
	chomp();
	next  if ( m/^\s*$/ );
	my( $index, $ym, $xm, @coeff ) = split( ',', $_ );

	my $rc = $coeff[$op_coeff];
	$rc = ($rc * $op_scale) + $op_offset;
	if ( $rc > 255 ) { $rc = 255 }
	if ( $rc <   0 ) { $rc =   0 }

	my $color = sprintf( "#%02x0000", $rc );

	#!! hardwire --xrise
	my $xs = ( $xm > $xmold ) ? 1 : 0;
	my $ys = ( $ym > $ymold ) ? 1 : 0;

	$xmold = $xm;
	$ymold = $ym;

	if ( $op_debug ) {
	    printf( "$index  $ym,$xm  %6d %4d\n", $coeff[$op_coeff], $rc );
	    #print( "$index  $ym,$xm  $coeff[$op_coeff]  $rc\n" );
	}

	print( STDOUT  "$ys,$xs,$color\n" );
    }

}

exit( (Error()) ? 1 : 0 );


#---------------------------------------------------------------------------
## functions
#---------------------------------------------------------------------------

# Show man page.
#
sub do_man
{
    my $pager = $ENV{'PAGER'} || "less";

    open( STDOUT, "| $pager" );

    {
	unless ( -r $ProgFile ) {   # message embedded in output
	    print( "Error:  file not found:  $ProgFile\n\n" );
	    last;
	}

#	system( "pod2text -s < $ProgFile" );
	system( "pod2man -s 1 -n $ProgName --center='User Contrib' $ProgFile | nroff -man" );
    }

    close( STDOUT );
    1;
}


#---------------------------------------------------------------------------
## Error Handling
#---------------------------------------------------------------------------

our $Error_cnt = 0;	# (private)

# Error message reporting.
# call:
#    Error( @text )	Print error message, increment error count.
#    Error()		Get error count.
# return:
#    ()  = Error count, false if no errors were recorded.
#
sub Error
{
    if ( @_ ) {
	warn( "Error:  ", @_ );
	$Error_cnt ++;
    }
    return( $Error_cnt );
}


__END__

#---------------------------------------------------------------------------
## Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rpix_stream -- Convert rpixel coefficient data into an image data stream

=head1		SYNOPSIS

 rpix_stream  [options]
    --coeff=N         coefficient number to image
    --scale=F         scale factor multiply coeff
    --offset=F        offset   color = (coeff * scale) + offset
                  sweep reset on scan mark edge
    --xrise           Xm rising edge
    --xfall           Xm falling edge
    --yrise           Ym rising edge
    --yfall           Ym falling edge
  options:
    --debug           show debug output on stderr
    --help            show command usage and exit
    --man             show man page and exit


=head1		DESCRIPTION

The idea is to process a series of coefficient data points into a stream
of image pixel data.  
Intended to operate as a filter between 'rpixel' and 'simage'.
There are two transformations to manage:

1) Coefficient data transform into RGB pixel value.

2) Scan marks transform into Xloc and Yloc scan reset points.

It is intended the user customize this program (or a copy) to create the
desired data visualization as an image.

 Input:  (stdin)
 index,Ym,Xm,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15
 0,1,0,15,-32768,4096,-1,33,291,291,291,291,291,291,291,291,291,291,291
 1,0,1,15,-32768,4096,-1,33,291,291,291,291,291,291,291,291,291,291,291

 Output:  (stdout)
 Ys,Xs,pixel
 1,0,#150000
 0,1,#150000

Input Xm,Ym are the raw scan mark signals from the physical scanning system.
Options select which edge to use for sweep reset in the image scanning.

Output Xs,Ys are 1 only when the sweep should reset to the left edge (Xs)
or top edge (Ys) of the image, otherwise 0.


=head1		OPTIONS

=over 8

=item B<--help>             - Show command usage and exit.

=item B<--man>              - Show man page and exit.

Prints the manual page and exits.

=back


=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES


=head1		ENVIRONMENT

=over 8

=item B<PAGER>

Value defines an output filter used to display manual pages.
By default, less(1) is used.  If PAGER='', stdout is written with no paging.

=back


=head1		FILES

none

=head1		SEE ALSO

=cut

