#!/usr/bin/perl -w
# 2018-02-28  William A. Hudson

# csvrow -- Extract rows from a csv file.
#---------------------------------------------------------------------------

use strict;

use Getopt::Long  ();
use Pod::Usage    ( 'pod2usage' );

use FindBin qw($RealBin);

our $ToolDir;
BEGIN
{
    $ToolDir = $RealBin;
}

use lib "$ToolDir";		# Libraries from this tool installation.


our $ProgFile = $0;	# this program
our $ProgName = $0;
    $ProgName =~ s:^.*/:: ;

#---------------------------------------------------------------------------
## Main program usage
#---------------------------------------------------------------------------

# Print program usage.
#    May show configuration defaults.
# call:
#    print_usage()
# return:
#    ()  = unused
#    Does NOT exit, let main program decide that.
#
sub print_usage
{
    pod2usage( {
	-message => "Count pixels on each scan line",
	-exitval => "NOEXIT",
	-verbose => 0,
    } );

    1;
}


#---------------------------------------------------------------------------
## Main program
#---------------------------------------------------------------------------

{
    select( STDOUT );  $| = 1;	# autoflush
    select( STDERR );  $| = 1;
    # Leave STDERR selected to protect data stream.

## Option processing.

#    my $op_verbose      = 0;
    my $op_debug        = 0;
    my $op_TESTOP       = 0;
    my $op_after        = 0;
    my $op_before       = 0;
    my $op_center       = 0;

    Getopt::Long::Configure(
	'posix_default',
    #	'bundling',		# enable -rN, require --word
    #	'bundling_override',	# good for -r3, clash --vx -v -x
	'no_ignore_case',
    );

    Getopt::Long::GetOptions(
	"--help"         => sub { print_usage();      exit( 0 ) },
	"--man"          => sub { do_man();           exit( 0 ) },

	"--after|a=i"    => \$op_after,
	"--before|b=i"   => \$op_before,
	"--center|c=i"   => \$op_center,
#	"--verbose|v"    => \$op_verbose,
	"--debug"        => \$op_debug,
	"--TESTOP"       => \$op_TESTOP,

    ) || do {	# GetOptions() returns false on errors in option parsing.
	Error( "Type '$ProgName --help' for usage.\n" );
	exit( 2 );
	# Do not show usage longer than 5 lines, let user see argument error.
    };

#    print( "ProgFile= $ProgFile\n" );
#    print( "ProgName= $ProgName\n" );

    # the actual numbers, not counting the given row number
    my $n_before = 0;
    my $n_after  = 0;

    if ( $op_before ) {
	$n_before  = $op_before;
    }
    if ( $op_after ) {
	$n_after   = $op_after;
    }
    if ( $op_center ) {
	$n_before = int( $op_center / 2 - 0.5 );
	$n_after  = int( $op_center / 2 );
	if ( $op_before || $op_after ) {
	    Error( "cannot have -c with -a or -b\n" );
	}
    }

    if ( $op_TESTOP ) {
	print( "--after        = $op_after\n" );
	print( "--before       = $op_before\n" );
	print( "--center       = $op_center\n" );
	print( "n_before       = $n_before\n" );
	print( "n_after        = $n_after\n" );
	last;
    }

#	print( "ARGC           = ", $#ARGV, "\n" );

    unless ( @ARGV ) {
	Error( "require row number\n" );
	last;
    }

    unless ( $ARGV[-1] =~ m/^\d+$/ ) {
	Error( "last arg not numeric, please read stdin\n" );
	last;
    }

## Inspect input row numbers.
#    print( "#ARGV= ", $#ARGV, "\n" );
    for ( my $i=1;  $i<=$#ARGV;  $i++ ) {
#	print( "ARGV[$i]= ", $ARGV[$i], "\n" );
	if ( $ARGV[$i] <= $ARGV[$i-1] ) {
	    Error( "row number out-of-order:  $ARGV[$i]\n" );
	}
    }
    #!! Or just sort them.  But still check for duplicate.

    last  if ( Error() );

## Assemble list of line numbers.
    my @lnum = ( 0 );		# minimum line number for compare
    foreach my $rn ( @ARGV ) {
	for ( my $i = (0 - $n_before);  $i <= $n_after;  $i++ ) {
	    my $n = $rn + $i;
	    if ( $n > $lnum[-1] ) {
		push( @lnum, $n );
		print( "$n\n" )  if ( $op_debug );
	    }
	}
    }
    shift( @lnum );		# remove the initial 0
#    foreach my $ln ( @lnum ) {
#	print( "$ln\n" );
#    }

## Read data stream header.
    my $header = <STDIN>;
    print( STDOUT  $header );

## Read data stream.

    my $lnum = shift( @lnum );
    my $ii   = 0;		# line number
    while ( <STDIN> )
    {
	$ii++;

	if ( $ii == $lnum ) {
	    print( STDOUT  $_ );
	    $lnum = shift( @lnum );
	    last  unless ( defined( $lnum ) )
	}
    }

}

exit( (Error()) ? 1 : 0 );


#---------------------------------------------------------------------------
## functions
#---------------------------------------------------------------------------

# Show man page.
#
sub do_man
{
    my $pager = $ENV{'PAGER'} || "less";

    open( STDOUT, "| $pager" );

    {
	unless ( -r $ProgFile ) {   # message embedded in output
	    print( "Error:  file not found:  $ProgFile\n\n" );
	    last;
	}

#	system( "pod2text -s < $ProgFile" );
	system( "pod2man -s 1 -n $ProgName --center='User Contrib' $ProgFile | nroff -man" );
    }

    close( STDOUT );
    1;
}


#---------------------------------------------------------------------------
## Error Handling
#---------------------------------------------------------------------------

our $Error_cnt = 0;	# (private)

# Error message reporting.
# call:
#    Error( @text )	Print error message, increment error count.
#    Error()		Get error count.
# return:
#    ()  = Error count, false if no errors were recorded.
#
sub Error
{
    if ( @_ ) {
	warn( "Error:  ", @_ );
	$Error_cnt ++;
    }
    return( $Error_cnt );
}


__END__

#---------------------------------------------------------------------------
## Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

csvrow -- Extract rows from a csv file

=head1		SYNOPSIS

 csvrow  [options]  M .. < stdin
    M                 row number
  additional output:
    -a, --after=N,    N rows after
    -b, --before=N,   N rows before
    -c, --center=N,   N rows centered, including row M
    #!! redefine to be additional
  options:
    --debug           show debug output
    --help            show command usage and exit
    --man             show man page and exit


=head1		DESCRIPTION

Extract rows by line number from a csv file on stdin.
The csv header line is always output.
Line numbers count from 0 as the header line and the first row is number 1.

The input lines are not parsed, so the input file need not be csv format.


=head1		OPTIONS

=over 4

=item B<-a, --after=N>      - Output N rows after,  not counting row M

=item B<-b, --before=N>     - Output N rows before, not counting row M

These two output N additional rows.

=item B<-c, --center=N>     - Output N rows centered, including row M

When N is even, the odd half count is applied after row M.

=item B<--help>             - Show command usage and exit.

=item B<--man>              - Show man page and exit.

Prints the manual page and exits.

=back


=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES

 Extract first data row.
 % csvrow  1 < file

 Extract multiple rows.
 % csvrow  10 20 30 < file

 Extract 3 rows after given rows.
 % csvrow  --after=3  10 20 30 < file

 Extract 3 rows before given rows.
 % csvrow  --before=3  10 20 30 < file

 Extract 2 rows before and 3 after given rows, total 6 rows.
 % csvrow  --center=6  10 20 30 < file


=head1		ENVIRONMENT

=over 8

=item B<PAGER>

Value defines an output filter used to display manual pages.
By default, less(1) is used.  If PAGER='', stdout is written with no paging.

=back


=head1		FILES

none

=head1		SEE ALSO

=cut

