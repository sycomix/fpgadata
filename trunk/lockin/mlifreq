#!/usr/bin/perl -w
# 2018-01-23  William A. Hudson

# mlifreq -- Multi-LockIn Frequency computation.
#
# Maintenance comments:  #!!
#
#---------------------------------------------------------------------------

use strict;

use Getopt::Long  ();
use Pod::Usage    ( 'pod2usage' );


our $ProgFile = $0;	# this program
our $ProgName = $0;
    $ProgName =~ s:^.*/:: ;

#---------------------------------------------------------------------------
## Main program usage
#---------------------------------------------------------------------------

# Print program usage.
#    May show configuration defaults.
# call:
#    print_usage()
# return:
#    ()  = unused
#    Does NOT exit, let main program decide that.
#
sub print_usage
{
    pod2usage( {
	-message => "Example program form",
	-exitval => "NOEXIT",
	-verbose => 0,
    } );

    return;
}


#---------------------------------------------------------------------------
## Main program
#---------------------------------------------------------------------------

{

## Option processing.

    my $op_freq         = 1;
    my $op_phinc        = 0;
    my $op_verbose      = 0;
    my $op_size         = 0;	# size

    Getopt::Long::Configure(
	'posix_default',
	'no_ignore_case',
    );

    Getopt::Long::GetOptions(
	"--help"         => sub { print_usage();      exit( 0 ) },
	"--man"          => sub { do_man();           exit( 0 ) },

	"--freq"         => \$op_freq,
	"--phinc"        => \$op_phinc,
	"--verbose|v"    => \$op_verbose,

    ) || do {	# GetOptions() returns false on errors in option parsing.
	Error( "Type '$ProgName --help' for usage.\n" );
	exit( 2 );
    };

    if ( $op_phinc ) {
	$op_freq = 0;
    }

#    print( "ProgFile= $ProgFile\n" );
#    print( "ProgName= $ProgName\n" );

    # Len = 2^20		bit width of increment
    # PhInc =			20-bit phase increment value
    # F0 = 50.0e6		base frequency, 50 MHz
    #
    # Freq = F0 / (Len / PhInc)		output frequency
    # Freq = F0 * (PhInc / Len)		output frequency
    # Freq = (F0 / Len) * PhInc		output frequency
    #
    # PhInc = (Len / F0) * Freq

    my $F0   = 50.0e6;
    my $Len  = 1024 * 1024;

    print( "     Freq       PhInc    PhInc\n" );

    if ( $op_freq ) {

	while ( <> )
	{
	    chomp();
	    next  if ( m/^\s*$/ );

	    my $freq = $_;

	    my $phinc = int( (($Len / $F0) * $freq) + 0.5 );
	    # round to nearest integer

	    printf( "%10.0f  %10d  0x%09x\n", $freq, $phinc, $phinc );
	}
    }
    else {
	while ( <> )
	{
	    chomp();
	    next  if ( m/^\s*$/ );

	    my $phinc = $_;

	    my $freq = ($F0 / $Len) * $phinc;

	    printf( "%10.0f  %10d  0x%09x\n", $freq, $phinc, $phinc );
	}
    }

}

exit( (Error()) ? 1 : 0 );


#---------------------------------------------------------------------------
## functions
#---------------------------------------------------------------------------

# Show command usage.
# call:
#    do_usage();
# return:
#    ()  : unused
#
sub do_usage
{
    pod2usage( {
	-message => "Example program form",
	-exitval => "NOEXIT",
	-verbose => 0,
    } );
    1;
}


# Show man page.
#
sub do_man
{
    my $pager = $ENV{'PAGER'} || "less";

    open( STDOUT, "| $pager" );

    {
	unless ( -r $ProgFile ) {   # message embedded in output
	    print( "Error:  file not found:  $ProgFile\n\n" );
	    last;
	}

	system( "pod2man -s 1 -n $ProgName --center='User Contrib' $ProgFile | nroff -man" );
    }

    close( STDOUT );
    1;
}


#---------------------------------------------------------------------------
## Error Handling
#---------------------------------------------------------------------------

our $Error_cnt = 0;	# (private)

# Error message reporting.
# call:
#    Error( @text )	Print error message, increment error count.
#    Error()		Get error count.
# return:
#    ()  = Error count, false if no errors were recorded.
#
sub Error
{
    if ( @_ ) {
	warn( "Error:  ", @_ );
	$Error_cnt ++;
    }
    return( $Error_cnt );
}


__END__

#---------------------------------------------------------------------------
## Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

mlifreq - Multi-LockIn Frequency computation.

=head1		SYNOPSIS

 mlifreq  [options]  [FILE..]
    FILE           input file, one value per line
    --freq         frequency as input, output phase increment (default)
    --phinc        phase increment as input, output frequency
    --help         show command usage and exit
    --man          show man page and exit


=head1		DESCRIPTION

Compute relationship betwee frequency (Freq) and 20-bit phase increment 
(PhInc) for the multi-channel lockin amplifier.

Constants are hardwired in the program.

    F0    = 50.0e6	base frequency, 50 MHz
    Len   = 2^20	bit width of increment

    Freq  = (F0 / Len) * PhInc		output frequency
    PhInc = (Len / F0) * Freq		20-bit phase increment value

Input values in FILE or on stdin, one per line.
Output has both Freq and PhInc, with a one-line heading.


=head1		OPTIONS

=over 8

=item B<--help>             - Show command usage and exit.

=item B<--man>              - Show man page and exit.

=back


=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES

    # convert Freq to PhInc
    % mlifreq         < freq.in
    % mlifreq --freq  < freq.in

    # convert PhInc to Freq
    % mlifreq --phinc < phinc.in

    % echo 250000 | mlifreq --freq
     Freq       PhInc    PhInc
    250000        5243  0x00000147b

    % echo 5243   | mlifreq --phinc
     Freq       PhInc    PhInc
    250006        5243  0x00000147b


=head1		ENVIRONMENT

=over 8

=item B<PAGER>

Value defines an output filter used to display manual pages.
By default, less(1) is used.  If PAGER='', stdout is written with no paging.

=back


=head1		FILES


=head1		SEE ALSO

=cut

