2017-07-09
		fpgadata - Architecture
		-----------------------

FPGA to Raspberry Pi (RPi) Data Transfer.

Programs:
    fpgadata	first version, replaced by rpixel
    rpixel	current version

    Run on Raspberry Pi (RPi) to transfer data from an FPGA connected to
    the RPi GPIO pins.

This file describes the architecture, ideas, design choices, and
implementation details of these related programs.  As such it may be
out-of-date.  The actual code embodies what was implemented, but likely
does not have the details contained here.


References:
-----------
BCM2835 ARM Peripherals
    Ref by RaspberryPi
    /home/var/ref/BCM2835-ARM-Peripherals.pdf
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf


----------------------------------------------------------------------------
## Principle of Operation
----------------------------------------------------------------------------

The basic idea is to connect around 8 to 12 FPGA gpio pins directly to
the RPi gpio pins and transfer bits in parallel.  A few additional signals
would control the transfer.

A very rough (factors of 2) performance base is:  #!! need better reference.
Parallel read rate is ~70 ns/xfer to a memory array.
Output toggle rate is ~20 ns/toggle, raw set/clear.  Actual usable half
period is more like 50 ns due to IO pin slew rate and settling.

Experiments with these working programs show a useable full handshake
transfer rate to a memory array of < 200 ns/transfer (5 Msample/s).

A FIFO (First-In First-Out) buffer is implemented in the FPGA to buffer
data when the RPi reader process experiences operating system sleeps.

Initial programs pass 8 data bits in parallel, one direction FPGA to RPi.
Handshake signal ReadAck from RPi tells the FPGA fifo that data has been
read out.

The fifo sends "read empty" to input signal "NoData" on the RPi.  The RPi
program continuously polls the inputs from the FPGA fifo, and discards
any samples where NoData=1.

    FPGA               RPi
    ---------          ---------
    data[7:0]   ---->  data[7:0]
    rdempty     ---->  NoData
    rdclk       <----  ReadAck

    wrfull      ---->  OverFlow

    MarkX       ---->  MarkX
    MarkY       ---->  MarkY


----------------------------------------------------------------------------
## Discussion
----------------------------------------------------------------------------

----------------------------------------------------------------------------
## Scan Image Formation
----------------------------------------------------------------------------

    A scanning system can be used to make measurements at a series of points.
    The data set at each point is called a "pixel".  In the case of an
    adaptive filter, the pixel data set is the set of 16 filter coefficients.

    Scanning is typically faster in the X-direction (scan row), with
    successinve rows forming a scan Frame.  Scanning can be uni-directional
    (i.e. with a fast retrace), or bi-directional (e.g. scan a row
    left-to-right, then scan the next row right-to-left).

    The scan position is typicaly marked by an X and Y sync signals that can
    be used to mark a known position in each scan direction.  The signals
    could be a pulse one pixel (or less) in duration, or could be a square
    wave marking each half of the image.  In other words, there are a lot of
    different ways to do it.

    We want to come up with a fairly simple way to form an image to get
    started, and worry about sync options later.

    The pixel stream is essentially a linear stream in time.  The sync
    signals mark certain pixels as being at a particular point in the
    2-dimensional surface being scanned.

    On the image display side, the sync signals need only indicate when to
    reset the Xloc and Yloc pixel position.

    On the physical scanner side, the sync signals can be almost anything
    related to the physical scanning process (e.g. Galvanometer scanning
    in a laser system).

Bi-directional scan:

            /\        /\
           /  \      /  \
      0 --/----\----/----\---		Galvanometer drive signal.
         /      \  /      \
        /        \/        \

           ____      ____
    A)  __|    |____|    |____		Zero crossing comparator.

    B)  1_________1_________1_		Pulse at beginning of scan.

    Note a pulse at each end of scan looses information about scan
    direction.


Uni-directional scan:

            /|    /|    /|
           / |   / |   / |
      0 --/--|--/--|--/--|-		Galvanometer drive signal.
         /   | /   | /   |
        /    |/    |/    |

           __    __    __
    A)  __|  |__|  |__|  |_		Zero crossing comparator.

    B)  1_____1_____1_____1___		Pulse at beginning of scan.


Data Flow of Scan Marks:

    Physical scan system input to FPGA, thru fifo to RPi
	Ymark, Xmark

    RPi data output in coefficient pixels
	Index, Ym, Xm, c0, c1, c2, ...

    Input to spixel image display
	Ys, Xs, pixA, pixB, ...


    Possibly combine the two scan marks into YXmark, making a single
    field of two digits.
    + A single handle for both scan marks, fewer fields.
    - More complex to decode.
  > Decided to keep seperate Ym, Xm in the data tables.

    The coefficients for a single pixel are distributed over the duration
    of the pixel.  Thus the scan mark edge may come part way thru a pixel.
    Thus the marks (Ym,Xm) are quantized to a full pixel, resulting in
    jitter over successive rows.
    A future enhancement may capture the fractional pixel where the scan
    mark occures.  Resolution to 1/8 or 1/4 pixel may be good enough.

    The code formatting the pixel data may sample the scan marks only
    on the first nibble of the first pixel.  If the scan mark is a pulse
    shorter than one pixel, then it may be missed.


Command pipeline:

    FPGA -> rpixel | rpix_stream | simage


simage:  Command to generat the image display.
    The scan marks could be very simple here, and would exist for a
    single pixel.

    One possibility is to combine Ys,Xs into a single value:
	0= continuation pixels, no reset
	1= reset Xloc
	3= reset Xloc and Yloc

	It is implied that Xloc is reset whenever Yloc is reset.
	Encoding values this way is compact, but more confusing,
	especially when extending Xs to a fractional pixel.

	> Decided NOT to do this.


----------------------------------------------------------------------------
## rpixel Command
----------------------------------------------------------------------------

Major operations:

Output format ideas:


----------------------------------------------------------------------------
## Class Structure
----------------------------------------------------------------------------

The class structure is pretty flat, with most classes directly used by
the main program.

main() programs:
    fpgadata.cpp
    rpixel.cpp

Classes:
    Error::	Global error handling.  Used by most other classes.

    yOption::	Option parsing helpers, used by main() program.

    yMan::	Manpage Display class.  Used by option --man.


    yRpiGpio::	Raspberry Pi GPIO base class.
		Opens "/dev/gpiomem" and runs mmap() to map gpio peripheral
		IO memory to the user process.

    yFramDat::	Frame Data memory array.  Used to hold all transferred data
		in memory.

    yCoeffItr:: An iterator to walk the yFramDat buffer and format data
		into filter coefficients for each pixel.

    yBuffStat::	Buffer Statistics base class.  Used for debug of buffer
		performance.  Not needed for data transfer.


----------------------------------------------------------------------------
## Error Handling
----------------------------------------------------------------------------

Exceptions:
    Exceptions are intended only for error handling.
    Library functions use exceptions as a way to get an error condition
    to a level where the program can report it thru the proper channels.

    We are using the C++ library <stdexcept> to classify and throw exceptions.

Error Reporting:
    Is the process of getting an error message to the user.
    Most programs will simply write it to stderr.

    A global class is used to report an error message, and to set a flag
    that an error has occured.  The flag can be later used to see if
    any error has occured, e.g. for setting program exit code.

Debug:
    Some classes will have a Debug attribute that can be set to trace
    function execution on stderr.  It is intended as a simple way for a
    user to see and verify some internal behavior.  The actual trace
    output may change.

    Not used much at this time.


----------------------------------------------------------------------------
## Manpages and Documentation
----------------------------------------------------------------------------

The idea is to keep manpages and documentation close to the source code,
so they are more likely to be updated as the code changes.  It is also
helpful to have appropriate places to capture thoughts as they occur.

--help
    Command line help.  Usually just the command synopsis.
    This is embedded in the main C-program file closest to the option parsing,
    and thus most likely correct.

--man
    Command line manpage.
    Intended to find the manpage that goes with the version of the currently
    executing program.  Most helpful in an environment where there are
    multiple versions of the same program.
    Is not just a user convinence feature.

Manpage
    Gives details about the use and operation of the program.  Is the primary
    user documentation and thus can be large and well structured.
    I like Perl POD (Plain Old Documentation) to provide simple source
    formatting, and use 'pod2man' to generate the actual manpage.

User Guide - doc/rpixel.text
    A place to put even more detail about each program.
    It also covers how the collection of programs are used together.

Developer Guide - doc/architecture.text
    Explain how the internals work.
    Capture thoughts about alternative methods and future features.

Issues log - doc/Issues.text
    Record notes about issues and defects noted in the programs.


----------------------------------------------------------------------------
## yRpiGpio::  Raspberry Pi GPIO base class
----------------------------------------------------------------------------

----------------------------------------------------------------------------
## yMan::  Manpage Display class
----------------------------------------------------------------------------

    Methods to show a man page for this executing program.

    This class mostly provides encapsulation for the show_manpage() function.
    It is structured as an instance method, though there is no object data.
    Future enhancements might add a TESTMODE or Debug to show the 'pod2man'
    command as an aid for user debug.

    The idea is to have the manpage source be a Perl POD file and use
    'pod2man' to generate the actual manpage.  The file is placed beside
    the program executable as an easy method for locating it.

    Perl programs have $0, which is the full path to the program file,
    which often contains the embedded POD text.

    In C-programs, argv[0] is the program name, but may not have the full
    path to the executable.  One solution is to use a Perl wrapper script.

    Here we use the Linux /proc/self/exe, which is a symbolic link containing
    the actual pathname of the executed command.  The suffix ".pod" is
    appended to form the actual POD file name.

